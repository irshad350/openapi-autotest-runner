openapi: 3.0.3
info:
  title: E-Commerce API
  description: API for managing an e-commerce platform
  version: 1.0.0
servers:
- url: https://fakestoreapi.com
  description: Fake Store API for testing and prototyping
paths:
  /products:
    get:
      summary: Retrieve a list of products
      parameters:
      - name: categoryId
        in: query
        description: Filter products by category ID
        required: false
        style: form
        explode: true
        schema:
          type: integer
      - name: sort
        in: query
        description: Sort products by a specific field
        required: false
        style: form
        explode: true
        schema:
          type: string
          enum:
          - name
          - price
      responses:
        "200":
          description: A list of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
              examples:
                example1:
                  summary: A sample list of products
                  value:
                  - id: 1
                    name: Laptop
                    description: High-performance laptop
                    price: 999.99
                    categoryId: 1
                  - id: 2
                    name: Smartphone
                    description: Latest model smartphone
                    price: 799.99
                    categoryId: 1
    post:
      summary: Create a new product
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Product'
        required: true
      responses:
        "201":
          description: Product created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                example1:
                  summary: A sample created product
                  value:
                    id: 3
                    name: Tablet
                    description: Portable tablet with stylus
                    price: 499.99
                    categoryId: 2
  /products/{id}:
    get:
      summary: Retrieve a product by ID
      parameters:
      - name: id
        in: path
        description: ID of the product to retrieve
        required: true
        style: simple
        explode: false
        schema:
          type: integer
      responses:
        "200":
          description: A product object
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
              examples:
                example1:
                  summary: A sample product
                  value:
                    id: 1
                    name: Laptop
                    description: High-performance laptop
                    price: 999.99
                    categoryId: 1
        "404":
          description: Product not found
  /categories:
    get:
      summary: Retrieve a list of categories
      responses:
        "200":
          description: A list of categories
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
              examples:
                example1:
                  summary: A sample list of categories
                  value:
                  - id: 1
                    name: Electronics
                  - id: 2
                    name: Books
    post:
      summary: Create a new category
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
        required: true
      responses:
        "201":
          description: Category created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              examples:
                example1:
                  summary: A sample created category
                  value:
                    id: 3
                    name: Home Appliances
  /users:
    get:
      summary: Retrieve a list of users
      responses:
        "200":
          description: A list of users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              examples:
                example1:
                  summary: A sample list of users
                  value:
                  - id: 1
                    username: john_doe
                    email: john@example.com
                  - id: 2
                    username: jane_smith
                    email: jane@example.com
    post:
      summary: Create a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "201":
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                example1:
                  summary: A sample created user
                  value:
                    id: 3
                    username: mark_twen
                    email: mark@example.com
components:
  schemas:
    Product:
      required:
      - categoryId
      - description
      - id
      - name
      - price
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the product
        name:
          type: string
          description: Name of the product
        description:
          type: string
          description: Detailed description of the product
        price:
          type: number
          description: Price of the product
          format: float
        categoryId:
          type: integer
          description: ID of the category the product belongs to
    Category:
      required:
      - id
      - name
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the category
        name:
          type: string
          description: Name of the category
    User:
      required:
      - email
      - id
      - username
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the user
        username:
          type: string
          description: Username of the user
        email:
          type: string
          description: Email address of the user
          format: email

openapi: 3.0.2
servers:
  - url: https://petstore3.swagger.io/api/v3
info:
  description: |-
    This is a sample Pet Store Server based on the OpenAPI 3.0 specification. You can find out more about
    Swagger at [http://swagger.io](http://swagger.io). In the third iteration of the pet store, we've switched to the design first approach!
    You can now help us improve the API whether it's by making changes to the definition itself or to the code.
    That way, with time, we can improve the API in general, and expose some of the new features in OAS3.

    Some useful links:
    - [The Pet Store repository](https://github.com/swagger-api/swagger-petstore)
    - [The source API definition for the Pet Store](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)
  version: 1.0.20-SNAPSHOT
  title: Swagger Petstore - OpenAPI 3.0
  termsOfService: 'http://swagger.io/terms/'
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: pet
    description: Everything about your Pets
    externalDocs:
      description: Find out more
      url: 'http://swagger.io'
  - name: store
    description: Access to Petstore orders
    externalDocs:
      description: Find out more about our store
      url: 'http://swagger.io'
  - name: user
    description: Operations about user
paths:
  /pet:
    post:
      tags:
        - pet
      summary: Add a new pet to the store
      description: Add a new pet to the store
      operationId: addPet
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
        '405':
          description: Invalid input
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        description: Create a new pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              name: "Doggie"
              category:
                id: 1
                name: "Dogs"
              photoUrls: ["http://example.com/photo1.jpg"]
              tags:
                - id: 1
                  name: "tag1"
              status: "available"
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              name: "Doggie"
              category:
                id: 1
                name: "Dogs"
              photoUrls: ["http://example.com/photo1.jpg"]
              tags:
                - id: 1
                  name: "tag1"
              status: "available"
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              name: "Doggie"
              categoryId: 1
              photoUrls: ["http://example.com/photo1.jpg"]
              tags:
                - id: 1
                  name: "tag1"
              status: "available"
    put:
      tags:
        - pet
      summary: Update an existing pet
      description: Update an existing pet by Id
      operationId: updatePet
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
      requestBody:
        description: Update an existent pet in the store
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              id: 10
              name: "Doggie"
              category:
                id: 1
                name: "Dogs"
              photoUrls: ["http://example.com/photo1.jpg"]
              tags:
                - id: 1
                  name: "tag1"
              status: "available"
          application/xml:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              id: 10
              name: "Doggie"
              category:
                id: 1
                name: "Dogs"
              photoUrls: ["http://example.com/photo1.jpg"]
              tags:
                - id: 1
                  name: "tag1"
              status: "available"
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Pet'
            example:
              id: 10
              name: "Doggie"
              categoryId: 1
              photoUrls: ["http://example.com/photo1.jpg"]
              tags:
                - id: 1
                  name: "tag1"
              status: "available"
  /pet/findByStatus:
    get:
      tags:
        - pet
      summary: Finds Pets by status
      description: Multiple status values can be provided with comma separated strings
      operationId: findPetsByStatus
      parameters:
        - name: status
          in: query
          description: Status values that need to be considered for filter
          required: false
          explode: true
          schema:
            type: string
            enum:
              - available
              - pending
              - sold
            default: available
          example: available
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              example:
                - id: 10
                  name: "Doggie"
                  status: "available"
                - id: 11
                  name: "Kitty"
                  status: "available"
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              example:
                - id: 10
                  name: "Doggie"
                  status: "available"
                - id: 11
                  name: "Kitty"
                  status: "available"
        '400':
          description: Invalid status value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/findByTags:
    get:
      tags:
        - pet
      summary: Finds Pets by tags
      description: >-
        Multiple tags can be provided with comma separated strings. Use tag1,
        tag2, tag3 for testing.
      operationId: findPetsByTags
      parameters:
        - name: tags
          in: query
          description: Tags to filter by
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
          example: tag1,tag2
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              example:
                - id: 10
                  name: "Doggie"
                  tags:
                    - id: 1
                      name: "tag1"
                - id: 11
                  name: "Kitty"
                  tags:
                    - id: 2
                      name: "tag2"
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Pet'
              example:
                - id: 10
                  name: "Doggie"
                  tags:
                    - id: 1
                      name: "tag1"
                - id: 11
                  name: "Kitty"
                  tags:
                    - id: 2
                      name: "tag2"
        '400':
          description: Invalid tag value
      security:
        - petstore_auth:
            - 'write:pets'
            - 'read:pets'
  /pet/{petId}:
    get:
      tags:
        - pet
      summary: Find pet by ID
      description: Returns a single pet
      operationId: getPetById
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of pet to return
          schema:
            type: integer
            format: int64
          example: 10
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
    post:
      tags:
        - pet
      summary: Updates a pet in the store with form data
      description: Updates a pet in the store with form data
      operationId: updatePetWithForm
      parameters:
        - name: petId
          in: path
          required: true
          description: ID of pet that needs to be updated
          schema:
            type: integer
            format: int64
          example: 10
      requestBody:
        description: Update an existing pet
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                name:
                  type: string
                status:
                  type: string
              required:
                - name
                - status
            example:
              name: "Doggie"
              status: "available"
      responses:
        '200':
          description: Successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
            application/json:
              schema:
                $ref: '#/components/schemas/Pet'
              example:
                id: 10
                name: "Doggie"
                category:
                  id: 1
                  name: "Dogs"
                photoUrls: ["http://example.com/photo1.jpg"]
                tags:
                  - id: 1
                    name: "tag1"
                status: "available"
        '405':
          description: Invalid input
    delete:
      tags:
        - pet
      summary: Deletes a pet
      description: Deletes a pet
      operationId: deletePet
      parameters:
        - name: petId
          in: path
          required: true
          description: Pet id to delete
          schema:
            type: integer
            format: int64
          example: 10
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid ID supplied
        '404':
          description: Pet not found
        '405':
          description: Validation exception
  /store/order:
    post:
      tags:
        - store
      summary: Place an order for a pet
      description: Place a new order in the store
      operationId: placeOrder
      requestBody:
        description: Order placed for purchasing the pet
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
            example:
              petId: 10
              quantity: 2
              shipDate: "2023-09-21T00:00:00.000Z"
              status: "placed"
              complete: false
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                petId: 10
                quantity: 2
                shipDate: "2023-09-21T00:00:00.000Z"
                status: "placed"
                complete: false
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                petId: 10
                quantity: 2
                shipDate: "2023-09-21T00:00:00.000Z"
                status: "placed"
                complete: false
        '400':
          description: Invalid Order
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5. Other values will generated exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          description: ID of order that needs to be fetched
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        '200':
          description: successful operation
          content:
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                petId: 10
                quantity: 2
                shipDate: "2023-09-21T00:00:00.000Z"
                status: "placed"
                complete: false
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
              example:
                id: 1
                petId: 10
                quantity: 2
                shipDate: "2023-09-21T00:00:00.000Z"
                status: "placed"
                complete: false
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /store/inventory:
    get:
      tags:
        - store
      summary: Returns pet inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
              example:
                available: 10
                pending: 5
                sold: 2
        '400':
          description: Invalid status value
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              id: 1
              username: "johndoe"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
              password: "password"
              phone: "123-456-7890"
              userStatus: 1
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid User
    get:
      tags:
        - user
      summary: Get user by user name
      description: Returns a single user
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be fetched. Use user1 for testing.
          schema:
            type: string
          example: johndoe
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              example:
                id: 1
                username: "johndoe"
                firstName: "John"
                lastName: "Doe"
                email: "john.doe@example.com"
                password: "password"
                phone: "123-456-7890"
                userStatus: 1
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: This can only be done by the logged in user.
      operationId: loginUser
      parameters:
        - name: username
          in: query
          required: true
          description: The user name for login
          schema:
            type: string
          example: johndoe
        - name: password
          in: query
          required: true
          description: The password for login in clear text
          schema:
            type: string
          example: password
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: string
              example: "logged in successfully"
        '400':
          description: Invalid username or password
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: This can only be done by the logged in user.
      operationId: logoutUser
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid session ID supplied
  /user/{username}:
    put:
      tags:
        - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be updated
          schema:
            type: string
          example: johndoe
      requestBody:
        description: Updated user object
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            example:
              id: 1
              username: "johndoe"
              firstName: "John"
              lastName: "Doe"
              email: "john.doe@example.com"
              password: "newpassword"
              phone: "123-456-7890"
              userStatus: 1
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid User
        '404':
          description: User not found
    delete:
      tags:
        - user
      summary: Deletes a user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          required: true
          description: The name that needs to be deleted
          schema:
            type: string
          example: johndoe
      responses:
        '200':
          description: successful operation
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Pet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        category:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
        photoUrls:
          type: array
          items:
            type: string
        tags:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                format: int64
              name:
                type: string
        status:
          type: string
          description: pet status in the store
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
        petId:
          type: integer
          format: int64
        quantity:
          type: integer
          format: int32
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
        complete:
          type: boolean
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          format: int32
